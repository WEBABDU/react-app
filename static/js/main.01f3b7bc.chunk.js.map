{"version":3,"sources":["api/api.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","headers","Accept","quotesAPI","get","then","data","App","props","useState","author","setEditAuthor","quote","setEditQuote","getedData","setGetedData","quotes","setEditQuotes","styles","setStylesQuotes","useEffect","a","asyncData","style","backgroundColor","className","color","class","onClick","Math","floor","random","indexQuotes","length","authorIndex","quoteIndex","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAEMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,8HACTC,QAAQ,CACJC,OAAQ,sBAKHC,EAAY,WAIjB,OAFgBN,EAASO,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKA,S,OCyD1CC,EAjEH,SAACC,GAAW,IAAD,EACWC,mBAAS,cADpB,mBACdC,EADc,KACNC,EADM,OAESF,mBAC5B,mJAHmB,mBAEdG,EAFc,KAEPC,EAFO,OAKaJ,oBAAS,GALtB,mBAKdK,EALc,KAKHC,EALG,OAMWN,mBAAS,IANpB,mBAMdO,EANc,KAMNC,EANM,OAOaR,mBAAS,IAPtB,mBAOdS,EAPc,KAONC,EAPM,KA8BrB,OATAC,qBAAU,WAAM,4CACf,4BAAAC,EAAA,sEACkBlB,IADlB,OACKG,EADL,OAECW,EAAcX,EAAKU,QACnBD,GAAa,GAHd,4CADe,uBAAC,WAAD,wBAMhBO,KACG,IAGD,sBAAMC,MAAO,CAACC,gBAAgBN,GAA9B,SACE,qBAAKO,UAAU,YAAYF,MAAO,CAACC,gBAAiBN,GAApD,SACA,qBAAKO,UAAU,iBAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,sBAAMA,UAAU,OAAOF,MAAO,CAAEG,MAAOR,GAAvC,SACGN,MAGL,qBAAKe,MAAM,eAAX,SACE,sBAAMF,UAAU,SAASF,MAAO,CAAEG,MAAOR,GAAzC,SACG,KAAOR,MAGZ,qBAAKe,UAAU,gBAAf,SACE,wBACEG,QAtCE,WACZ,IAAML,EAAK,cAAUM,KAAKC,MAAsB,IAAhBD,KAAKE,UAA1B,YAA6CF,KAAKC,MAC3C,IAAhBD,KAAKE,UADI,YAENF,KAAKC,MAAsB,IAAhBD,KAAKE,UAFV,KAIPC,EAAcH,KAAKC,MAAMD,KAAKE,SAAWf,EAAOiB,QAChDC,EAAclB,EAAOgB,GAAatB,OAClCyB,EAAanB,EAAOgB,GAAapB,MACrCD,EAAcuB,GACdrB,EAAasB,GACbhB,EAAgBI,IA6BNa,UAAWtB,EACXW,UAAU,MACVF,MAAO,CAAEC,gBAAiBN,GAJ5B,oCCtCGmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.01f3b7bc.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/',\r\n    headers:{\r\n        Accept: 'application/json'\r\n    }\r\n    \r\n})\r\n\r\nexport const quotesAPI = {\r\n    getQuotes(){\r\n        const promise = instance.get().then(data => data.data)\r\n        \r\n        return promise\r\n    }\r\n}\r\n","import \"./App.css\";\nimport { quotesAPI } from \"./api/api\";\nimport { useEffect, useState } from \"react\";\n\nconst App = (props) => {\n  const [author, setEditAuthor] = useState(\"Oxxxymiron\");\n  const [quote, setEditQuote] = useState(\n    \"To hell with feeling sorry for yourself, less useless reflections and more reflexes. When a clear goal is set, empty wanderings become a quest.\"\n  );\n  const [getedData, setGetedData] = useState(false)\n  const [quotes, setEditQuotes] = useState([]);\n  const [styles, setStylesQuotes] = useState(\"\");\n\n  let quotesC = () => {\n    const style = `rgb(${Math.floor(Math.random() * 255)},${Math.floor(\n      Math.random() * 255\n    )},${Math.floor(Math.random() * 255)})`;\n\n    let indexQuotes = Math.floor(Math.random() * quotes.length);\n    let authorIndex = quotes[indexQuotes].author;\n    let quoteIndex = quotes[indexQuotes].quote;\n    setEditAuthor(authorIndex);\n    setEditQuote(quoteIndex);\n    setStylesQuotes(style);\n  };\n  useEffect(() => {\n   async function asyncData() { \n    let data = await quotesAPI.getQuotes();\n    setEditQuotes(data.quotes);\n    setGetedData(true) \n  }\n  asyncData()\n  }, []);\n\n  return (\n    <body style={{backgroundColor:styles}}>\n      <div className=\"container\" style={{backgroundColor: styles}}>\n      <div className=\"quotes-content\">\n        <div className=\"quote-box\">\n          <div className=\"quote-text\">\n            <span className=\"text\" style={{ color: styles }}>\n              {quote}\n            </span>\n          </div>\n          <div class=\"quote-author\">\n            <span className=\"author\" style={{ color: styles }}>\n              {\"- \" + author}\n            </span>\n          </div>\n          <div className=\"random-button\">\n            <button\n              onClick={quotesC}\n              disabled={!getedData}\n              className=\"btn\"\n              style={{ backgroundColor: styles }}\n            >\n              New quotes\n            </button>\n\n            \n          </div>\n        </div>\n      </div>\n    </div>\n    </body>\n    \n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}